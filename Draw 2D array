boolean[][] visibility;

void setup() {
    size(500, 500);
    strokeWeight(12);
    background(255);
    
    int[][] grid = {{1, 2, 1, 3}, {3, 4, 5, 2}, {2, 5, 3, 4}};
    visibility = new boolean[grid.length][grid[0].length];
    
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[0].length; j++) {
            visibility[i][j] = false;
        }
    }
}

void draw(){
    int[][] grid = {{1, 2, 1, 3}, {3, 4, 5, 2}, {2, 5, 3, 4}};
    
    int rows = grid.length;
    int cols = grid[0].length;
    
    int w = width / cols;  
    int h = height / rows; 
    
    background(255);
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (visibility[i][j]) {
                draw_lines(10 + j * w, 10 + i * h, grid[i][j]);
            }
        }
    }
}

void draw_lines(int x, int y, int n){
    for (int i = 0; i < n; i++) {
        line(x + i*20 , y, x + i*20, y + 40);
    }
}

void mousePressed(){
    int[][] grid = {{1, 2, 1, 3}, {3, 4, 5, 2}, {2, 5, 3, 4}};
    
    int rows = grid.length;
    int cols = grid[0].length;
    
    int w = width / cols;  
    int h = height / rows; 
    
    int j = (mouseX - 10) / w;
    int i = (mouseY - 10) / h;
    
    if (i >= 0 && i < rows && j >= 0 && j < cols) {
        visibility[i][j] = !visibility[i][j];
    }
}
